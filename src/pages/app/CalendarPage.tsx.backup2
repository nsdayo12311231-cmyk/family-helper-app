import { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, Star } from 'lucide-react';
import { useAuth } from '../../contexts/AuthContext';
import { useTaskManager } from '../../hooks/useTaskManager';

const CalendarPage = () => {
  const { currentMember } = useAuth();
  const { completions } = useTaskManager(currentMember?.familyId || '', currentMember?.id || '');
  const [currentDate, setCurrentDate] = useState(new Date());


  if (!currentMember) {
    return null;
  }

  const year = currentDate.getFullYear();
  const month = currentDate.getMonth();

  // 月の最初の日を取得
  const firstDay = new Date(year, month, 1);
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - firstDay.getDay()); // 週の最初の日に調整

  // カレンダーの日付配列を生成
  const calendarDays = [];
  const currentDateForLoop = new Date(startDate);

  for (let i = 0; i < 42; i++) { // 6週間分
    calendarDays.push(new Date(currentDateForLoop));
    currentDateForLoop.setDate(currentDateForLoop.getDate() + 1);
  }

  const monthNames = [
    '1月', '2月', '3月', '4月', '5月', '6月',
    '7月', '8月', '9月', '10月', '11月', '12月'
  ];

  const weekDays = ['日', '月', '火', '水', '木', '金', '土'];

  const goToPrevMonth = () => {
    setCurrentDate(new Date(year, month - 1, 1));
  };

  const goToNextMonth = () => {
    setCurrentDate(new Date(year, month + 1, 1));
  };

  const isToday = (date: Date) => {
    const today = new Date();
    return date.toDateString() === today.toDateString();
  };

  const isCurrentMonth = (date: Date) => {
    return date.getMonth() === month;
  };

  // カレンダー用のヘルパー関数
  const getDateCompletions = (date: Date) => {
    // タイムゾーンの問題を避けるため、ローカル日付文字列を使用
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const dateStr = `${year}-${month}-${day}`;
    return completions.filter(c => c.completedAt.startsWith(dateStr));
  };

  const hasCompletions = (date: Date) => {
    return getDateCompletions(date).length > 0;
  };

  const getMonthlyStats = () => {
    const monthStart = new Date(year, month, 1);
    const monthEnd = new Date(year, month + 1, 0);

    const monthCompletions = completions.filter(c => {
      const completionDate = new Date(c.completedAt);
      return completionDate >= monthStart && completionDate <= monthEnd;
    });

    const completedDays = new Set(
      monthCompletions.map(c => c.completedAt.split('T')[0])
    ).size;

    const totalCompletions = monthCompletions.length;
    const totalEarnings = monthCompletions.reduce((sum, c) => sum + c.reward, 0);

    return {
      completedDays,
      totalCompletions,
      totalEarnings
    };
  };

  const monthlyStats = getMonthlyStats();

  return (
    <div className="p-4 space-y-6">
      {/* カレンダーヘッダー */}
      <div className="flex items-center justify-between">
        <button
          onClick={goToPrevMonth}
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <ChevronLeft className="h-5 w-5" />
        </button>

        <h1 className="text-xl font-bold text-gray-800">
          {year}年{monthNames[month]}
        </h1>

        <button
          onClick={goToNextMonth}
          className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
        >
          <ChevronRight className="h-5 w-5" />
        </button>
      </div>

      {/* カレンダー */}
      <div className="card">
        {/* 凡例 */}
        <div className="flex items-center justify-center mb-4 p-2 bg-gray-50 rounded-lg">
          <div className="flex items-center space-x-4 text-xs text-gray-600">
            <div className="flex items-center space-x-1">
              <Star className="w-3 h-3 text-yellow-500 fill-current" />
              <span>タスク かんりょう</span>
            </div>
            <div className="flex items-center space-x-1">
              <div className="w-3 h-3 bg-blue-500 rounded"></div>
              <span>きょう</span>
            </div>
          </div>
        </div>

        {/* 曜日ヘッダー */}
        <div className="grid grid-cols-7 gap-1 mb-2">
          {weekDays.map((day) => (
            <div key={day} className="text-center text-sm font-medium text-gray-600 py-2">
              {day}
            </div>
          ))}
        </div>

        {/* 日付グリッド */}
        <div className="grid grid-cols-7 gap-1">
          {calendarDays.map((date, index) => {
            const isCurrentMonthDate = isCurrentMonth(date);
            const isTodayDate = isToday(date);
            const dateHasCompletions = hasCompletions(date);
            const dateCompletions = getDateCompletions(date);
            const completionCount = dateCompletions.length;

            return (
              <div
                key={index}
                className={`
                  aspect-square flex flex-col items-center justify-center text-sm relative cursor-pointer rounded-lg transition-colors p-1
                  ${isCurrentMonthDate ? 'text-gray-800 hover:bg-gray-50' : 'text-gray-300'}
                  ${isTodayDate ? 'bg-blue-500 text-white hover:bg-blue-600' : ''}
                  ${dateHasCompletions && isCurrentMonthDate ? 'bg-gradient-to-br from-yellow-50 to-orange-50 border border-yellow-200' : ''}
                `}
              >
                <span className="font-medium">{date.getDate()}</span>

                {/* 星とタスク完了数の表示 */}
                {isCurrentMonthDate && dateHasCompletions && (
                  <div className="flex items-center space-x-1 mt-0.5">
                    <Star
                      className={`w-3 h-3 ${isTodayDate ? 'text-yellow-300' : 'text-yellow-500'} fill-current`}
                    />
                    {completionCount > 1 && (
                      <span className={`text-xs font-bold ${isTodayDate ? 'text-yellow-300' : 'text-orange-600'}`}>
                        {completionCount}
                      </span>
                    )}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>

      {/* こんげつの じっせき */}
      <div className="card">
        <h2 className="text-lg font-bold text-gray-800 mb-4 text-center">
          📊 こんげつの じっせき
        </h2>
        <div className="space-y-3">
          <div className="flex justify-between">
            <span className="text-gray-600">じっこう にっすう:</span>
            <span className="font-bold">{monthlyStats.completedDays}にち</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">そう かんりょう かいすう:</span>
            <span className="font-bold">{monthlyStats.totalCompletions}かい</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-600">かくとく きんがく:</span>
            <span className="font-bold text-green-600">{monthlyStats.totalEarnings}えん</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CalendarPage;