import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { useTaskManager } from '../../hooks/useTaskManager';
import { useTextDisplay } from '../../contexts/TextDisplayContext';
import { TEXT_MAPPINGS } from '../../utils/textMappings';
import { localStorageManager } from '../../utils/localStorage';
import type { Task } from '../../types';

const AdminPage = () => {
  const navigate = useNavigate();
  const { currentMember, family, members, addMember, deleteMember, clearTestData } = useAuth();
  const taskManager = currentMember && family ? useTaskManager(family.id, currentMember.id) : null;
  const [activeTab, setActiveTab] = useState<'tasks' | 'members' | 'settings'>('tasks');
  const [showAddTask, setShowAddTask] = useState(false);
  const [showAddMember, setShowAddMember] = useState(false);
  const [showChangePasscode, setShowChangePasscode] = useState(false);
  const [newPasscode, setNewPasscode] = useState('');
  const [confirmPasscode, setConfirmPasscode] = useState('');
  const [passcodeError, setPasscodeError] = useState('');
  const [selectedMemberFilter, setSelectedMemberFilter] = useState<string>('all');
  const [showEditRecord, setShowEditRecord] = useState<{type: 'pending' | 'goal' | 'investment', show: boolean}>({type: 'pending', show: false});
  const { textMode } = useTextDisplay();

  const handlePasscodeChange = () => {
    if (newPasscode.length !== 4) {
      setPasscodeError('パスコードは4桁で入力してください');
      return;
    }

    if (newPasscode !== confirmPasscode) {
      setPasscodeError('パスコードが一致しません');
      return;
    }

    localStorageManager.setAdminPasscode(newPasscode);
    setPasscodeError('');
    setNewPasscode('');
    setConfirmPasscode('');
    setShowChangePasscode(false);
    alert('パスコードを変更しました');
  };

  if (!currentMember || currentMember.role !== 'admin' || !taskManager) {
    return (
      <div className="p-4">
        <div className="card text-center py-12">
          <div className="text-6xl mb-4">🔒</div>
          <h2 className="text-2xl font-bold text-red-600 mb-4">
            {TEXT_MAPPINGS.accessRestricted[textMode]}
          </h2>
          <p className="text-lg text-gray-600">
            {TEXT_MAPPINGS.adminOnly[textMode]}
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-4 space-y-6">
      {/* ヘッダー */}
      <div className="card hover-grow">
        <div className="flex items-center justify-between mb-4">
          <button
            onClick={() => navigate('/app')}
            className="bg-gradient-to-r from-blue-400 to-purple-500 hover:from-blue-500 hover:to-purple-600 text-white font-bold py-2 px-4 rounded-2xl transition-all duration-300 transform hover:scale-105 shadow-lg"
          >
            🏠 ホームにもどる
          </button>
          <div className="flex-1"></div>
        </div>
        <h1 className="text-3xl font-bold text-center text-fun">
          👨‍💼 {TEXT_MAPPINGS.adminScreen[textMode]} 👨‍💼
        </h1>
        <p className="text-center text-lg text-gray-600 mt-2">
          かぞくの せっていを かんりしよう
        </p>
      </div>

      {/* タブメニュー */}
      <div className="flex bg-gradient-to-r from-blue-100 to-purple-100 rounded-3xl p-2 border-4 border-blue-200 shadow-lg">
        <button
          onClick={() => setActiveTab('tasks')}
          className={`flex-1 py-3 px-4 rounded-2xl font-bold text-lg transition-all ${
            activeTab === 'tasks'
              ? 'bg-white text-blue-600 shadow-lg transform scale-105'
              : 'text-blue-500 hover:bg-white/50'
          }`}
        >
          📝 {TEXT_MAPPINGS.tasks[textMode]}
        </button>
        <button
          onClick={() => setActiveTab('members')}
          className={`flex-1 py-3 px-4 rounded-2xl font-bold text-lg transition-all ${
            activeTab === 'members'
              ? 'bg-white text-blue-600 shadow-lg transform scale-105'
              : 'text-blue-500 hover:bg-white/50'
          }`}
        >
          👨‍👩‍👧‍👦 {TEXT_MAPPINGS.members[textMode]}
        </button>
        <button
          onClick={() => setActiveTab('settings')}
          className={`flex-1 py-3 px-4 rounded-2xl font-bold text-lg transition-all ${
            activeTab === 'settings'
              ? 'bg-white text-blue-600 shadow-lg transform scale-105'
              : 'text-blue-500 hover:bg-white/50'
          }`}
        >
          ⚙️ {TEXT_MAPPINGS.settings[textMode]}
        </button>
      </div>

      {/* タスク管理タブ */}
      {activeTab === 'tasks' && (
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold text-fun">📝 タスク かんり</h2>
            <button
              onClick={() => setShowAddTask(true)}
              className="btn-fun"
            >
              ➕ あたらしい タスク
            </button>
          </div>

          {/* メンバーフィルタ */}
          <div className="card">
            <div className="flex items-center space-x-4">
              <label className="text-lg font-bold text-purple-600">フィルタ:</label>
              <select
                value={selectedMemberFilter}
                onChange={(e) => setSelectedMemberFilter(e.target.value)}
                className="flex-1 p-2 border-2 border-purple-200 rounded-xl text-lg"
              >
                <option value="all">すべてのメンバー</option>
                {members.filter(member => member.role !== 'admin').map((member) => (
                  <option key={member.id} value={member.id}>
                    {member.avatar} {member.name}のタスク
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="space-y-4">
            {taskManager.tasks
              .filter((task) => selectedMemberFilter === 'all' || task.memberId === selectedMemberFilter)
              .map((task) => {
                const taskOwner = members.find(m => m.id === task.memberId);
                return (
              <div key={task.id} className="card hover-grow">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="text-4xl">{task.icon}</div>
                    <div>
                      <div className="flex items-center space-x-2 mb-1">
                        <h3 className="text-xl font-bold text-purple-600">{task.name}</h3>
                        {taskOwner && (
                          <span className="bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-sm font-bold">
                            {taskOwner.avatar} {taskOwner.name}
                          </span>
                        )}
                      </div>
                      <p className="text-gray-600">{task.description}</p>
                      <div className="flex space-x-4 text-sm text-gray-500 mt-1">
                        <span>💰 {task.reward}えん</span>
                        <span>📅 1日{task.maxCompletionsPerDay}回まで</span>
                        <span className={task.isActive ? 'text-green-600' : 'text-red-600'}>
                          {task.isActive ? '✅ アクティブ' : '❌ 無効'}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div className="flex space-x-2">
                    <button
                      onClick={() => taskManager.updateTask(task.id, { isActive: !task.isActive })}
                      className={`px-4 py-2 rounded-2xl font-bold transition-all ${
                        task.isActive
                          ? 'bg-red-400 hover:bg-red-500 text-white'
                          : 'bg-green-400 hover:bg-green-500 text-white'
                      }`}
                    >
                      {task.isActive ? '無効化' : '有効化'}
                    </button>
                    <button
                      onClick={() => taskManager.deleteTask(task.id)}
                      className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-2xl font-bold transition-all"
                    >
                      削除
                    </button>
                  </div>
                </div>
              </div>
                );
              })}

            {taskManager.tasks.filter((task) => selectedMemberFilter === 'all' || task.memberId === selectedMemberFilter).length === 0 && (
              <div className="card text-center py-12">
                <div className="text-6xl mb-4">📝</div>
                <h3 className="text-2xl font-bold text-gray-600 mb-4">
                  {selectedMemberFilter === 'all' ? 'まだタスクがありません' : '選択したメンバーのタスクがありません'}
                </h3>
                <p className="text-lg text-gray-500">
                  新しいタスクを追加して始めましょう
                </p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* メンバー管理タブ */}
      {activeTab === 'members' && (
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-2xl font-bold text-fun">👨‍👩‍👧‍👦 メンバー かんり</h2>
            <button
              onClick={() => setShowAddMember(true)}
              className="btn-fun"
            >
              ➕ あたらしい メンバー
            </button>
          </div>

          <div className="space-y-4">
            {members.map((member) => (
              <div key={member.id} className="card hover-grow">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="text-4xl">{member.avatar}</div>
                    <div>
                      <h3 className="text-xl font-bold text-purple-600">{member.name}</h3>
                      <div className="flex space-x-4 text-sm text-gray-500">
                        <span>👤 {member.role === 'admin' ? '管理者' : '子供'}</span>
                        <span>🎨 {member.theme === 'boy' ? '男の子' : '女の子'}テーマ</span>
                      </div>
                    </div>
                  </div>
                  {member.role !== 'admin' && (
                    <button
                      onClick={() => {
                        if (confirm(`${member.name}を削除しますか？この操作は取り消せません。`)) {
                          deleteMember(member.id);
                        }
                      }}
                      className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-2xl font-bold transition-all"
                    >
                      削除
                    </button>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* 設定タブ */}
      {activeTab === 'settings' && (
        <div className="space-y-4">
          <h2 className="text-2xl font-bold text-fun">⚙️ ぜんたい せってい</h2>

          <div className="card hover-grow">
            <h3 className="text-xl font-bold text-purple-600 mb-4">🏠 かぞく じょうほう</h3>
            <div className="space-y-3">
              <div className="flex justify-between">
                <span className="text-gray-600">家族名:</span>
                <span className="font-bold">{family?.name}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">メンバー数:</span>
                <span className="font-bold">{members.length}人</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">作成日:</span>
                <span className="font-bold">
                  {family?.createdAt ? new Date(family.createdAt).toLocaleDateString('ja-JP') : '-'}
                </span>
              </div>
            </div>
          </div>

          <div className="card hover-grow">
            <h3 className="text-xl font-bold text-purple-600 mb-4">🔒 セキュリティ</h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-gray-600">現在のパスコード:</span>
                <span className="font-bold text-lg">****</span>
              </div>
              <button
                onClick={() => setShowChangePasscode(true)}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                🔑 パスコードを変更
              </button>
            </div>
          </div>

          <div className="card hover-grow">
            <h3 className="text-xl font-bold text-red-600 mb-4">🧪 テスト機能</h3>
            <div className="space-y-3">
              <p className="text-sm text-gray-600 mb-4">
                テスト用の機能です。本番運用時は削除してください。
              </p>
              <button
                onClick={() => {
                  if (window.confirm('全てのタスク完了履歴をリセットしますか？\nこの操作は取り消せません。')) {
                    // タスク完了履歴をリセット
                    localStorage.removeItem('taskCompletions');
                    alert('タスク完了履歴をリセットしました！\nページを再読み込みして確認してください。');
                    window.location.reload();
                  }
                }}
                className="w-full bg-orange-500 hover:bg-orange-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                🔄 タスク完了履歴をリセット
              </button>
              <button
                onClick={() => {
                  if (window.confirm('テストデータを完全にクリアしますか？\n（獲得記録、振り分け待ち、目標貯金、投資など全てのお金データ）\n\nこの操作は取り消せません。')) {
                    clearTestData();
                  }
                }}
                className="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                🧹 テストデータを完全クリア
              </button>
              <button
                onClick={() => {
                  if (window.confirm('全てのデータをリセットしますか？\nこの操作は取り消せません。')) {
                    // 全データをリセット
                    const keysToKeep = ['theme', 'language']; // 保持したいキー
                    const allKeys = Object.keys(localStorage);
                    allKeys.forEach(key => {
                      if (!keysToKeep.includes(key)) {
                        localStorage.removeItem(key);
                      }
                    });
                    alert('全データをリセットしました！\nページを再読み込みしてセットアップから始めてください。');
                    window.location.reload();
                  }
                }}
                className="w-full bg-red-700 hover:bg-red-800 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                💥 全データリセット
              </button>
            </div>
          </div>

          <div className="card hover-grow">
            <h3 className="text-xl font-bold text-purple-600 mb-4">🔧 データ修復</h3>
            <div className="space-y-3">
              <button
                onClick={() => {
                  if (confirm('memberIdが設定されていないタスクを修復しますか？')) {
                    // 既存タスクのmemberIdを修復
                    const tasks = taskManager?.tasks || [];
                    let fixedCount = 0;

                    tasks.forEach(task => {
                      if (!task.memberId) {
                        // memberIdが未設定の場合、最初の子供メンバーに割り当て
                        const firstChildMember = members.find(m => m.role !== 'admin');
                        if (firstChildMember) {
                          taskManager?.updateTask(task.id, {
                            memberId: firstChildMember.id
                          });
                          fixedCount++;
                        }
                      }
                    });

                    alert(`${fixedCount}個のタスクを修復しました。ページをリロードしてください。`);
                  }
                }}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                🔧 古いタスクのmemberIdを修復
              </button>
            </div>
          </div>

          <div className="card hover-grow">
            <h3 className="text-xl font-bold text-purple-600 mb-4">📅 カレンダー記録編集</h3>
            <div className="space-y-3">
              <button
                onClick={() => setShowEditRecord({type: 'pending', show: true})}
                className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                💰 振り分け待ち金額を編集
              </button>

              <button
                onClick={() => setShowEditRecord({type: 'goal', show: true})}
                className="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                🎯 目標貯金残高を編集
              </button>

              <button
                onClick={() => setShowEditRecord({type: 'investment', show: true})}
                className="w-full bg-purple-500 hover:bg-purple-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                📈 投資残高を編集
              </button>

              <div className="mt-4 p-4 bg-gray-100 rounded-2xl">
                <h4 className="font-bold text-gray-700 mb-2">💡 使い方のヒント</h4>
                <div className="text-sm text-gray-600 space-y-1">
                  <p>• メンバーを番号で選択してください</p>
                  <p>• 月の形式: 2025-09 (年-月)</p>
                  <p>• 現在のメンバー一覧:</p>
                  {members.map((member, index) => (
                    <p key={member.id} className="ml-4">
                      {index + 1}. {member.avatar} {member.name}
                    </p>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <div className="card hover-grow">
            <h3 className="text-xl font-bold text-purple-600 mb-4">🗑️ データ そうさ</h3>
            <div className="space-y-3">
              <button
                onClick={() => {
                  if (confirm('全てのデータを削除しますか？この操作は取り消せません。')) {
                    localStorage.clear();
                    window.location.reload();
                  }
                }}
                className="w-full bg-red-500 hover:bg-red-600 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                🗑️ すべてのデータを削除
              </button>
            </div>
          </div>
        </div>
      )}

      {/* タスク追加モーダル */}
      {showAddTask && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-6 max-w-md w-full border-4 border-blue-300 shadow-2xl">
            <h3 className="text-2xl font-bold text-center mb-6 text-fun">
              📝 あたらしい タスク
            </h3>
            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.target as HTMLFormElement);
              const selectedMemberId = formData.get('memberId') as string;

              taskManager.addTask({
                name: formData.get('name') as string,
                description: formData.get('name') as string, // 説明は名前と同じに設定
                icon: formData.get('icon') as string,
                reward: parseInt(formData.get('reward') as string),
                maxCompletionsPerDay: parseInt(formData.get('maxCompletions') as string),
                isActive: true,
                memberId: selectedMemberId,
                familyId: family!.id,
                updatedAt: new Date().toISOString(),
              });
              setShowAddTask(false);
            }}>
              <div className="space-y-4">
                <div>
                  <label className="block text-lg font-bold text-blue-600 mb-2">だれの タスク？</label>
                  <select
                    name="memberId"
                    required
                    className="w-full p-3 border-3 border-blue-200 rounded-2xl text-lg"
                  >
                    <option value="">だれの タスクか えらんでください</option>
                    {members.filter(member => member.role !== 'admin').map((member) => (
                      <option key={member.id} value={member.id}>
                        {member.avatar} {member.name}
                      </option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-lg font-bold text-blue-600 mb-2">なまえ</label>
                  <input
                    name="name"
                    type="text"
                    required
                    className="w-full p-3 border-3 border-blue-200 rounded-2xl text-lg"
                    placeholder="おさらあらい"
                  />
                </div>
                <div>
                  <label className="block text-lg font-bold text-blue-600 mb-2">アイコン</label>
                  <select
                    name="icon"
                    required
                    defaultValue=""
                    className="w-full p-3 border-3 border-blue-200 rounded-2xl text-lg text-center text-3xl"
                    style={{ fontFamily: 'Apple Color Emoji, Segoe UI Emoji' }}
                  >
                    <option value="" disabled>えらんでください</option>
                    <option value="🍽️">🍽️</option>
                    <option value="🧹">🧹</option>
                    <option value="🧺">🧺</option>
                    <option value="📚">📚</option>
                    <option value="🗑️">🗑️</option>
                    <option value="🌸">🌸</option>
                    <option value="🐕">🐕</option>
                    <option value="🛏️">🛏️</option>
                    <option value="👟">👟</option>
                    <option value="📖">📖</option>
                    <option value="🎯">🎯</option>
                    <option value="🚿">🚿</option>
                  </select>
                </div>
                <div>
                  <label className="block text-lg font-bold text-blue-600 mb-2">ほうしゅう (えん)</label>
                  <input
                    name="reward"
                    type="number"
                    required
                    min="1"
                    className="w-full p-3 border-3 border-blue-200 rounded-2xl text-lg"
                    placeholder="50"
                  />
                </div>
                <div>
                  <label className="block text-lg font-bold text-blue-600 mb-2">1にちの かいすう</label>
                  <input
                    name="maxCompletions"
                    type="number"
                    required
                    min="1"
                    max="10"
                    className="w-full p-3 border-3 border-blue-200 rounded-2xl text-lg"
                    placeholder="3"
                  />
                </div>
              </div>
              <div className="flex space-x-4 mt-6">
                <button
                  type="button"
                  onClick={() => setShowAddTask(false)}
                  className="flex-1 bg-gray-400 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-2xl transition-all"
                >
                  キャンセル
                </button>
                <button
                  type="submit"
                  className="flex-1 btn-fun"
                >
                  つくる！
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* メンバー追加モーダル */}
      {showAddMember && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-6 max-w-md w-full border-4 border-purple-300 shadow-2xl">
            <h3 className="text-2xl font-bold text-center mb-6 text-fun">
              👨‍👩‍👧‍👦 あたらしい メンバー
            </h3>
            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.target as HTMLFormElement);
              addMember({
                name: formData.get('name') as string,
                avatar: formData.get('avatar') as string,
                role: 'child',
                theme: formData.get('theme') as 'boy' | 'girl',
                textStyle: 'hiragana',
                displayOrder: members.length,
                isActive: true,
              });
              setShowAddMember(false);
            }}>
              <div className="space-y-4">
                <div>
                  <label className="block text-lg font-bold text-purple-600 mb-2">なまえ</label>
                  <input
                    name="name"
                    type="text"
                    required
                    className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg"
                    placeholder="たろう"
                  />
                </div>
                <div>
                  <label className="block text-lg font-bold text-purple-600 mb-2">アバター</label>
                  <input
                    name="avatar"
                    type="text"
                    required
                    className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg"
                    placeholder="👦"
                  />
                </div>
                <div>
                  <label className="block text-lg font-bold text-purple-600 mb-2">テーマ</label>
                  <select
                    name="theme"
                    required
                    className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg"
                  >
                    <option value="boy">男の子</option>
                    <option value="girl">女の子</option>
                  </select>
                </div>
              </div>
              <div className="flex space-x-4 mt-6">
                <button
                  type="button"
                  onClick={() => setShowAddMember(false)}
                  className="flex-1 bg-gray-400 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-2xl transition-all"
                >
                  キャンセル
                </button>
                <button
                  type="submit"
                  className="flex-1 btn-fun"
                >
                  ついか！
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* パスコード変更モーダル */}
      {showChangePasscode && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-6 max-w-md w-full border-4 border-purple-300 shadow-2xl">
            <h3 className="text-2xl font-bold text-center mb-6 text-fun">
              🔑 パスコード変更
            </h3>

            {passcodeError && (
              <div className="bg-red-100 border-2 border-red-300 rounded-2xl p-3 mb-4">
                <p className="text-red-600 font-bold text-center text-sm">{passcodeError}</p>
              </div>
            )}

            <div className="space-y-4">
              <div>
                <label className="block text-lg font-bold text-purple-600 mb-2">新しいパスコード（4桁）</label>
                <input
                  type="text"
                  maxLength={4}
                  value={newPasscode}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^0-9]/g, '');
                    setNewPasscode(value);
                    setPasscodeError('');
                  }}
                  className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg text-center font-bold"
                  placeholder="1234"
                />
              </div>
              <div>
                <label className="block text-lg font-bold text-purple-600 mb-2">確認用パスコード</label>
                <input
                  type="text"
                  maxLength={4}
                  value={confirmPasscode}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^0-9]/g, '');
                    setConfirmPasscode(value);
                    setPasscodeError('');
                  }}
                  className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg text-center font-bold"
                  placeholder="1234"
                />
              </div>
            </div>

            <div className="flex space-x-4 mt-6">
              <button
                type="button"
                onClick={() => {
                  setShowChangePasscode(false);
                  setNewPasscode('');
                  setConfirmPasscode('');
                  setPasscodeError('');
                }}
                className="flex-1 bg-gray-400 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-2xl transition-all"
              >
                キャンセル
              </button>
              <button
                onClick={handlePasscodeChange}
                className="flex-1 btn-fun"
              >
                変更する
              </button>
            </div>
          </div>
        </div>
      )}

      {/* カレンダー記録編集モーダル */}
      {showEditRecord.show && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-6 max-w-md w-full border-4 border-blue-300 shadow-2xl">
            <h3 className="text-2xl font-bold text-center mb-6 text-fun">
              {showEditRecord.type === 'pending' && '💰 振り分け待ち金額を編集'}
              {showEditRecord.type === 'goal' && '🎯 目標貯金残高を編集'}
              {showEditRecord.type === 'investment' && '📈 投資残高を編集'}
            </h3>
            <form onSubmit={(e) => {
              e.preventDefault();
              const formData = new FormData(e.target as HTMLFormElement);
              const memberId = formData.get('memberId') as string;
              const member = members.find(m => m.id === memberId);
              if (!member) {
                alert('メンバーが見つかりません');
                return;
              }

              const amount = parseInt(formData.get('amount') as string);
              if (isNaN(amount) || amount < 0) {
                alert('正しい金額を入力してください');
                return;
              }

              if (showEditRecord.type === 'pending') {
                const month = formData.get('month') as string;
                if (!month) {
                  alert('月を入力してください');
                  return;
                }
                localStorage.setItem(`pendingMoney-${family?.id}-${memberId}-${month}`, amount.toString());
                alert(`${member.name}の${month}の振り分け待ち金額を${amount}円に変更しました`);
              } else if (showEditRecord.type === 'goal') {
                localStorage.setItem(`goalSavings-${family?.id}-${memberId}`, amount.toString());
                alert(`${member.name}の目標貯金残高を${amount}円に変更しました`);
              } else if (showEditRecord.type === 'investment') {
                localStorage.setItem(`investment-${family?.id}-${memberId}`, amount.toString());
                alert(`${member.name}の投資残高を${amount}円に変更しました`);
              }

              setShowEditRecord({type: 'pending', show: false});
            }}>
              <div className="space-y-4">
                <div>
                  <label className="block text-lg font-bold text-purple-600 mb-2">
                    メンバー
                  </label>
                  <select
                    name="memberId"
                    required
                    className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg"
                  >
                    <option value="">選択してください</option>
                    {members.map(member => (
                      <option key={member.id} value={member.id}>
                        {member.avatar} {member.name}
                      </option>
                    ))}
                  </select>
                </div>

                {showEditRecord.type === 'pending' && (
                  <div>
                    <label className="block text-lg font-bold text-purple-600 mb-2">
                      月 (年-月)
                    </label>
                    <input
                      name="month"
                      type="text"
                      required
                      placeholder="2025-09"
                      className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg"
                    />
                  </div>
                )}

                <div>
                  <label className="block text-lg font-bold text-purple-600 mb-2">
                    金額 (円)
                  </label>
                  <input
                    name="amount"
                    type="number"
                    required
                    min="0"
                    placeholder="1000"
                    className="w-full p-3 border-3 border-purple-200 rounded-2xl text-lg"
                  />
                </div>
              </div>

              <div className="flex space-x-4 mt-6">
                <button
                  type="button"
                  onClick={() => setShowEditRecord({type: 'pending', show: false})}
                  className="flex-1 bg-gray-400 hover:bg-gray-500 text-white font-bold py-3 px-6 rounded-2xl transition-all"
                >
                  キャンセル
                </button>
                <button
                  type="submit"
                  className="flex-1 btn-fun"
                >
                  変更する
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminPage;